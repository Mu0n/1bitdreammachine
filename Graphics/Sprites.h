/* Sprites.htypedef struct Actor  {SpriteHandle gfxBank;Rect theRect;short *reel;short *mvmts;short *currentFrame;short *currentMvmt;} Actor;typedef Actor *ActorPtr, **ActorHandle; */ typedef struct Sprite {	Rect			theRect,bufferRect;	int			    numberFrames;	int             speed;	BitMapHandle    buffer; /*if none, use srcXor or leave trail*/	BitMapHandle	frames;	BitMapHandle	masks;  /*if none, risk ugliness in non-white backdrops */} Sprite;typedef Sprite *SpritePtr, **SpriteHandle;/* Create/Destroy */void DeleteSprite(SpriteHandle theSprite);SpriteHandle CreateSprite(int frameAmount, Boolean wantMasks, Boolean wantBuffer);void MyDisposeHandle(Handle h);void MyDisposePtr(Ptr p);void MyDisposeBitMap(BitMap *bmp);/* Tests/Read */Boolean IsSpriteMasked(SpriteHandle sh);Boolean IsSpriteCleaning(SpriteHandle sh);int GetSpriteX(SpriteHandle theSprite);int GetSpriteY(SpriteHandle theSprite);Point GetSpritePos(SpriteHandle theSprite);/* Assigns */void SetSpritePos(SpriteHandle theSprite, Point where);void SetSpriteX(SpriteHandle theSprite,int newX);void SetSpriteY(SpriteHandle theSprite,int newY);void LoadBMIntoSpriteF(SpriteHandle theSprite,short theFrame, BitMap *loadBM);void LoadPictIntoSpriteFrame(SpriteHandle theSprite,short theFrame, int resID);SpriteHandle LoadDataIntoSprite(short fRefNum, Boolean wantMasks, Boolean wantBuffer);/* Modify GetSprite: captures the background under the sprite's current location */void OffsetSprite(SpriteHandle theSprite,int offX, int offY);void MyCalcMask(BitMapPtr srcBM, BitMapPtr dstBM);void GetSpriteBuffer(SpriteHandle theSprite);/* Display - Blit: detects mask and draws if present. Draw functions are of lower-level*/void BlitSprite(SpriteHandle theSprite, short frameIndex);void DrawSprite(SpriteHandle theSprite, short frameIndex, short transfer);void DrawSpriteTo(SpriteHandle theSprite, short frameIndex, short transfer, BitMap *destBM);void DrawMask(SpriteHandle theSprite, short frameIndex, short transfer);